// Real-time Password Matching
const passwordField = document.getElementById("signupPassword");
const confirmPasswordField = document.getElementById("confirmPassword");
const passwordMismatch = document.getElementById("passwordMismatch");
const passwordMatch = document.getElementById("passwordMatch");

function checkPasswordMatch() {
  const password = passwordField.value;
  const confirmPassword = confirmPasswordField.value;

  if (password === "" || confirmPassword === "") {
    passwordMismatch.style.display = "none";
    passwordMatch.style.display = "none";
    return;
  }

  if (password === confirmPassword) {
    passwordMismatch.style.display = "none";
    passwordMatch.style.display = "block";
  } else {
    passwordMismatch.style.display = "block";
    passwordMatch.style.display = "none";
  }
}

passwordField.addEventListener("input", checkPasswordMatch);
confirmPasswordField.addEventListener("input", checkPasswordMatch);

// Initialize popovers
document.addEventListener('DOMContentLoaded', function() {
    // Initialize all popovers
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });

    // Initialize terms modal trigger
    document.getElementById('termsLink').addEventListener('click', function(e) {
        e.preventDefault();
        new bootstrap.Modal(document.getElementById('termsModal')).show();
    });
});

// Form validation functions
function setupFormValidation(formType) {
    const form = document.getElementById('signupForm');
    const userTypeSelect = document.getElementById('userType');
    const emailField = document.getElementById('signupEmail');
    const idField = document.getElementById('signupID');
    const certificateUploadField = document.getElementById('certificateUpload');
    const certificateUploadLabel = certificateUploadField.previousElementSibling;
    const termsCheckbox = document.getElementById('termsCheckbox');
    const submitButton = document.getElementById('submitSignupForm');

    // Update form fields based on user type
    function updateFormFields() {
        const userType = userTypeSelect.value;
        
        if (userType === "student") {
            emailField.pattern = "^[a-zA-Z0-9._%+-]+@neu\\.edu\\.ph$";
            emailField.placeholder = "example@neu.edu.ph";
            emailField.title = "Email must end with @neu.edu.ph";
            idField.pattern = "^\\d{2}-\\d{5}-\\d{3}$";
            idField.placeholder = "25-12345-678";
            idField.title = "ID must be in the format 25-12345-678";
            certificateUploadField.required = true;
            certificateUploadField.style.display = "block";
            certificateUploadLabel.style.display = "block";
        } else if (userType === "alumni") {
            emailField.pattern = "^[a-zA-Z0-9._%+-]+@(neu\\.edu\\.ph|gmail\\.com)$";
            emailField.placeholder = "example@neu.edu.ph or example@gmail.com";
            emailField.title = "Email must end with @neu.edu.ph or @gmail.com";
            idField.pattern = "^\\d{2}-\\d{5}-\\d{3}$";
            idField.placeholder = "25-12345-678";
            idField.title = "ID must be in the format 25-12345-678";
            certificateUploadField.required = true;
            certificateUploadField.style.display = "block";
            certificateUploadLabel.style.display = "block";
        } else if (userType === "faculty") {
            emailField.pattern = "^[a-zA-Z0-9._%+-]+@neu\\.edu\\.ph$";
            emailField.placeholder = "example@neu.edu.ph";
            emailField.title = "Email must end with @neu.edu.ph";
            idField.pattern = "^\\d{6}$";
            idField.placeholder = "123456";
            idField.title = "ID must be a 6-digit number";
            certificateUploadField.required = false;
            certificateUploadField.style.display = "none";
            certificateUploadLabel.style.display = "none";
        }
    }

    // Handle form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!form.checkValidity()) {
            e.stopPropagation();
            form.classList.add('was-validated');
            return;
        }

        const formData = {
            name: document.getElementById('signupName').value,
            email: emailField.value,
            ID: idField.value,
            userType: userTypeSelect.value,
            password: document.getElementById('signupPassword').value
        };

        try {
            if (formType === 'studentSignup') {
                // Handle student signup flow
                const certificateFile = certificateUploadField.files[0];
                const storageRef = firebase.storage().ref(`certificates/pending/${formData.email}_${certificateFile.name}`);
                await storageRef.put(certificateFile);
                const certificateURL = await storageRef.getDownloadURL();

                // Save to account requests
                await firebase.firestore().collection('accountRequests').add({
                    ...formData,
                    certificateURL,
                    status: 'pending',
                    timestamp: firebase.firestore.FieldValue.serverTimestamp()
                });

                showAlert('Account request submitted successfully! Please wait for admin approval.', 'success');
            } else if (formType === 'createUser') {
                // Handle direct user creation by admin
                const userCredential = await firebase.auth().createUserWithEmailAndPassword(formData.email, formData.password);
                
                if (certificateUploadField.files.length > 0) {
                    const certificateFile = certificateUploadField.files[0];
                    const storageRef = firebase.storage().ref(`certificates/verified/${formData.email}_${certificateFile.name}`);
                    await storageRef.put(certificateFile);
                    formData.certificateURL = await storageRef.getDownloadURL();
                }

                await firebase.firestore().collection('users').doc(userCredential.user.uid).set({
                    ...formData,
                    timestamp: firebase.firestore.FieldValue.serverTimestamp()
                });

                showAlert('User created successfully!', 'success');
            }

            // Reset form and close modal
            form.reset();
            const modal = bootstrap.Modal.getInstance(document.getElementById('signupModal'));
            modal.hide();

        } catch (error) {
            console.error('Signup error:', error);
            showAlert(error.message, 'danger');
        }
    });

    // Enable/disable submit button based on terms checkbox
    if (termsCheckbox) {
        termsCheckbox.addEventListener('change', function() {
            submitButton.disabled = !this.checked;
        });
    }

    // Update fields when user type changes
    userTypeSelect.addEventListener('change', updateFormFields);
    
    // Initial field setup
    updateFormFields();
}

// Initialize appropriate form validation based on button click
document.getElementById('Studentsignup')?.addEventListener('click', () => setupFormValidation('studentSignup'));
document.getElementById('CreateUser')?.addEventListener('click', () => setupFormValidation('createUser'));


